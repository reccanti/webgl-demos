{"version":3,"file":"static/webpack/static/development/pages/demo-01.js.2ffb2167d3a242435c9c.hot-update.js","sources":["webpack:///./demos/demo-01.js"],"sourcesContent":["const glsl = x => x;\n\nconst vertShaderSource = glsl`\n    attribute vec4 a_position;\n\n    void main() {\n        gl_Position = a_position;\n    }\n`;\n\nconst fragShaderSource = glsl`\n    precision mediump float;\n\n    void main() {\n        gl_FragColor = vec4(1, 0, 0.5, 1);\n    }\n`;\n\nfunction createShader(gl, type, source) {\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    if (success) {\n        return shader;\n    }\n    console.error(gl.getShaderInfoLog(shader));\n    gl.deleteShader(shader);\n}\n\nfunction createProgram(gl, vertShader, fragShader) {\n    const program = gl.createProgram();\n    gl.attachShader(program, vertShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n    if (success) {\n        return program;\n    }\n    console.error(gl.getProgramInfoLog(program));\n    gl.deleteProgram(program);\n}\n\nexport default function (canvas, gl) {\n\n    // INITIALIZATION CODE \n\n    // create the program \n    const vertShader = createShader(gl, gl.VERTEX_SHADER, vertShaderSource);\n    const fragShader = createShader(gl, gl.FRAGMENT_SHADER, fragShaderSource);\n    const program = createProgram(gl, vertShader, fragShader);\n\n    // get the location of attributes\n    const positionAttributeLocation = gl.getAttribLocation(program, \"a_position\");\n\n    // create buffers\n    const positionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\n    // bind data to the buffer\n    // prettier-ignore\n    const positions = [\n        0, 0,\n        0, 0.5,\n        0.7, 0\n    ];\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\n\n    // RENDERING CODE\n\n    // convert from clip-space to pixels\n    gl.viewport(0, 0, canvas.clientWidth, canvas.clientHeight);\n\n    // clear the canvas\n    gl.clearColor(0, 0, 0, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    // use the program\n    gl.useProgram(program);\n\n    // turn on the attribute\n    gl.enableVertexAttribArray(positionAttributeLocation);\n\n    // tell the attribute how to get data out of the position buffer\n    (() => {\n        const size = 2;\n        const type = gl.FLOAT;\n        const normalize = false;\n        const stride = 0;\n        const offset = 0;\n        gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);\n    })();\n\n    // draw the data in the buffer\n    (() => {\n        const primitiveType = gl.TRIANGLES;\n        const offset = 0;\n        const count = 3;\n        gl.drawArrays(primitiveType, offset, count);\n    })()\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AACA;AACA;AAQA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AAKA;AAIA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}